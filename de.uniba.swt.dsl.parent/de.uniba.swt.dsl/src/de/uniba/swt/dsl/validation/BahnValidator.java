/*
 * generated by Xtext 2.20.0
 */
package de.uniba.swt.dsl.validation;


import de.uniba.swt.dsl.bahn.*;
import de.uniba.swt.dsl.common.layout.models.CompositeLayoutException;
import de.uniba.swt.dsl.common.layout.models.LayoutException;
import de.uniba.swt.dsl.validation.util.ValidationException;
import de.uniba.swt.dsl.validation.validators.DeclValidator;
import de.uniba.swt.dsl.validation.validators.ExpressionValidator;
import de.uniba.swt.dsl.validation.validators.LayoutValidator;
import de.uniba.swt.dsl.validation.validators.StatementValidator;
import org.eclipse.xtext.validation.Check;

/**
 * This class contains custom validation rules. 
 *
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#validation
 */
public class BahnValidator extends AbstractBahnValidator {

    @Check
    public void typeCheckingExpression(Expression expression) {
        try {
            ExpressionValidator.validate(expression);
        } catch (ValidationException e) {
            error(e.getMessage(), e.getFeature());
        }
    }

    @Check
    public void typeCheckingStatement(Statement statement) {
        try {
            StatementValidator.validate(statement);
        } catch (ValidationException e) {
            error(e.getMessage(), e.getFeature());
        }
    }

    @Check
    public void typeCheckingFuncDecl(FuncDecl funcDecl) {
        try {
            DeclValidator.validateFuncDecl(funcDecl);
        } catch (ValidationException e) {
            error(e.getMessage(), e.getFeature());
        }
    }

    @Check
    public void validateLayoutElement(LayoutElement element) {
        try {
            LayoutValidator.validateElement(element);
        } catch (ValidationException e) {
            error(e.getMessage(), e.getFeature());
        }
    }
    
    @Check
    public void validateLayoutReference(LayoutReference reference) {
        try {
            LayoutValidator.validateReference(reference);
        } catch (ValidationException e) {
            error(e.getMessage(), e.getFeature());
        }
    }

    @Check
    public void validateNetworkLayout(LayoutProperty layoutProperty) {
        try {
            LayoutValidator validator = new LayoutValidator();
            validator.validateLayout(layoutProperty);
        } catch (CompositeLayoutException compositeExp) {
            for (LayoutException exp : compositeExp.getExceptions()) {
                error(exp.getMessage(), BahnPackage.Literals.LAYOUT_PROPERTY__ITEMS);
            }
        }
    }

//    @Check
//    public void mainFuncRequired(BahnExpr bahnExpr) {
//        boolean hasMain = bahnExpr.getDecls() != null
//                && bahnExpr.getDecls().stream().anyMatch(d -> Objects.equals(d.getName().toLowerCase(), "main"));
//        if (!hasMain) {
//            error("Main function is required", BahnexprPackage.Literals.BAHN_EXPR__DECLS);
//        }
//    }
}
