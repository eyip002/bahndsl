module interlocking_sample
    def request_route(string src_signal_id, string dst_signal_id, string train_id): string
        
        # 1. Get all routes
        string route_ids[] = get routes from src_signal_id to dst_signal_id

        # 2. Find shortest route
        string id = get_shortest_route(route_ids)

        # 3. Check route grantability
        bool is_grantable = route_is_grantable(id)
        if !is_grantable
            id = ""
        else
            # 4. Check route clearance
            bool is_clear = route_is_clear(id) 
            if !is_clear
                id = ""
            else
                # 5. Block the route
                grant id to train_id

                # 6. Set the points and signals
                set_points_signals(id)
            end
        end

        return id
    end

    def get_shortest_route(string route_ids[]): string
        float min_len = 2147483647

        string result = route_ids[0]
        for string route_id in route_ids 
            float len = get config route.length_cm route_id
            if len < min_len
                min_len = len
                result = route_id
            end
        end

        return result
    end

    def route_is_grantable(string route_id): bool
        string train_id = get config route.train_id route_id

        string conflict_routes[] = get config route.conflicts route_id

        int i = 0
        bool result = true
        for string conflict_route_id in conflict_routes
            string conflict_train_id = get config route.train_id conflict_route_id
            if conflict_train_id != ""
                result = false
            end
        end

        return result
    end

    def route_is_clear(string route_id): bool
        bool result = true

        # check entry signal
        string src_signal = get config route.source route_id
        string src_state = get signal src_signal
        if src_state != "red"
            result = false
        end

        #  All track segments on the route have to be clear
        if result
            string segment_ids[] = get config route.path route_id
            for string segment_id in segment_ids
                if is segment_id occupied
                    result = false
                end
            end
        end

        return result
    end

    def set_points_signals(string route_id)
        # switch all points
        string point_ids[] = get config route.point_positions route_id
        for string point_id in point_ids
            string pos = get config route_point.position point_id
            if pos == "normal"
                set point point_id to reverse
            else
                set point point_id to normal
            end
        end

        # set entry signal to green
        string src_signal_id = get config route.source route_id
        set signal src_signal_id to "green"
    end
end