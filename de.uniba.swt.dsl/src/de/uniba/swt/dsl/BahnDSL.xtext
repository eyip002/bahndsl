grammar de.uniba.swt.dsl.BahnDSL with org.eclipse.xtext.common.Terminals

import "http://www.eclipse.org/emf/2002/Ecore" as ecore

generate bahnDSL "http://www.uniba.de/swt/dsl/BahnDSL"

ModuleObject:
	'module' name=ID
		(properties+=ModuleProperty)*
	'end';
	
ModuleProperty:
	AspectsProperty 
	| BoardsProperty 
	| SegmentsProperty 
	| SignalsProperty 
	| PointsProperty 
	| BlocksProperty 
	| TrainsProperty 
	| LayoutProperty 
	| PlatformProperty;

AspectsProperty :
	{AspectsProperty} 'aspects'
		(items+=AspectElement)*
	'end';
BoardsProperty :
	{BoardsProperty} 'boards'
		(items+=BoardElement)*
	'end';
SegmentsProperty :
	'segments' boardId=ID
		(items+=SegmentElement)*
	'end';
SignalsProperty :
	'signals' boardId=ID
		(items+=SignalElement)*
	'end';
PointsProperty :
	'points' boardId=ID
		(items+=PointElement)*
	'end';
BlocksProperty :
	{BlocksProperty} 'blocks'
		(items+=BlockElement)*
	'end';
TrainsProperty :
	{TrainsProperty} 'trains'
		(items+=TrainElement)*
	'end';
LayoutProperty :
	{LayoutProperty} 'layout'
		(items+=LayoutElement)*
	'end';
PlatformProperty :
	{PlatformProperty} 'platform'
		(items+=PlatformElement)*
	'end';
	
PlatformElement: 
	('length' length=INT) 
	| ('length_unit' (lengthUnit=('cm'|'m'))) 
	| ('weight_unit' (weightUnit=('gr'|'kg'))) 
	| ('direction' (direction=('clockwise'|'anti-clockwise')))
	| {PlatformElement} ('train_types' (trainTypes+=TrainType)*)
;
		
TrainType:
	'cargo' | 'passenger'
;

AspectElement :
	id=AspectId value=HEX
;

BoardElement :
	id=ID uniqueId=HEX ('features' features+=BoardFeatureElement (',' features+=BoardFeatureElement)*)?
;

BoardFeatureElement:
	number=HEX ':' value=HEX
;

SegmentElement :
	id=ID address=HEX
;

SignalElement :
	id=ID number=HEX 'aspects' (aspects+=AspectId (',' aspects+=AspectId)*) 'initial' initial=AspectId 
;

PointElement :
	id=ID number=HEX aspects=PointAspectsElement 'initial' initial=AspectId
;

PointAspectsElement:
	ReferencePointAspectsElement | OverridePointAspectsElement	
;

ReferencePointAspectsElement:
	{ReferencePointAspectsElement} (referenceAspects+=ReferencePointAspectElement)*
;

OverridePointAspectsElement:
	{OverridePointAspectsElement} 'aspects' (overrideAspects+=OverridePointAspectElement)+	
;

OverridePointAspectElement:
	id=AspectId value=HEX ':' segments=PointSegment
;

ReferencePointAspectElement :
	id=AspectId ':' segments=PointSegment
;

PointSegment:
	segStart=ID direction=DIRECTION segEnd=ID
;

AspectId:
	ID
;

BlockElement :
	BidirectionalBlockElement | ClockwiseBlockElement | AntiClockwiseBlockElement
;

BidirectionalBlockElement:
	id=ID 'buffer' ':' startSeg=ID ',' startSignal=ID directionStart=DIRECTION  'main' ':' mainSeg=ID directionEnd=DIRECTION  'buffer' ':' endSeg=ID ',' endSignal=ID
;

ClockwiseBlockElement:
	id=ID 'buffer' ':' startSeg=ID ',' startSignal=ID direction=DIRECTION  'main' ':' mainSeg=ID
;

AntiClockwiseBlockElement:
	id=ID 'main' ':' mainSeg=ID direction=DIRECTION 'buffer' ':' endSeg=ID ',' endSignal=ID
;

TrainElement :
	id=ID address=HEX 'steps' steps=INT 'calibration' (calibrations+=INT (',' calibrations+=INT)*) 'weight' weight=INT
		'peripherals' (peripherals+=PeripheralElement)* 
;

PeripheralElement:
	id=ID 'bit' bit=INT 'initial' initial=INT
;

LayoutElement :
	(chains+=LayoutChainElement)+
;

LayoutChainElement:
	ids+=LayoutId ('--' ids+=LayoutId)*
;

LayoutId:
	objectId=ID ('.' prop=ID)?
;

enum DIRECTION:
	Clockwise='->' | AntiClockwise='<-' | Bidirectional='<->'
;

terminal HEX returns ecore::ELong:
	('0x'|'0X') ('0'..'9'|'a'..'f'|'A'..'F')+;