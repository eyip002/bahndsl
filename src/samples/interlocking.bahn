module interlocking_sample
    def interlocking(string src_signal_id, string dst_signal_id, string train_id): string
        string route_ids[100]

        # 1. Get all routes
        int count_routes = get routes from src_signal_id to dst_signal_id binding route_ids

        # 2. Find shortest route
        string id = get_shortest_route(count_routes, route_ids)

        # 3. Check route grantability
        bool is_grantable = route_is_grantable(id)
        if !is_grantable
            id = ""
        else
            # 4. Check route clearance
            bool is_clear = route_is_clear(id)
            if !is_clear
                id = ""
            else
                # 5. Block the route
                block_route(id, train_id)

                # 6. Set the points and signals
                set_points_signals(id)
            end
        end

        return id
    end

    def get_shortest_route(int count_routes, string route_ids[]): string
        float min_len = 2147483647
        int i = 0
        int result = 0
        while i < count_routes
            string route_id = route_ids[i]
            float len = extern config_get_scalar_float_value("route", route_id, "length")
            if len < min_len
                min_len = len
                result = i
            end

            i = i + 1
        end

        return route_ids[result]
    end

    def route_is_grantable(string route_id): bool
        string train_id = extern config_get_scalar_string_value("route", route_id, "train")

        string conflict_routes[100]
        int count_conflict_routes = extern config_get_array_string_value("route", route_id, "conflicts", conflict_routes)

        int i = 0
        bool result = true
        while i < count_conflict_routes
            string conflict_route_id = conflict_routes[i]
            string conflict_train_id = extern config_get_scalar_string_value("route", conflict_route_id, "train")
            if conflict_train_id != ""
                result = false
            end

            i = i + 1
        end

        return result
    end

    def route_is_clear(string route_id): bool
        bool result = true

        # check entry signal
        string src_signal = extern config_get_scalar_string_value("route", route_id, "source")
        string src_state = get signal src_signal
        if src_state != "red"
            result = false
        else
            # check flank signals
            string flank_signals[100]
            int flank_signals_count = extern config_get_array_string_value("route", route_id, "signals", flank_signals)
            int i = 0
            while i < flank_signals_count
                string flank_signal = flank_signals[i]
                string flank_state = get signal flank_signal
                if flank_signal != "red"
                    result = false
                end

                i  = i + 1
            end
        end

        #  All track segments on the route have to be clear
        if result
            string segment_ids[100]
            int segment_ids_count = extern config_get_array_string_value("route", route_id, "path", segment_ids)
            int i = 0
            while i < segment_ids_count && result
                string segment_id = segment_ids[i]
                bool oc = extern is_segment_occupied(segment_id)
                if oc
                    result = false
                end
                i = i + 1
            end
        end

        return result
    end

    def block_route(string route_id, string train_id)
        bool success = extern config_set_scalar_string_value("route", route_id, "train", train_id)
    end

    def set_points_signals(string route_id)
        # switch all points
        string point_ids[100]
        int points_count = extern config_get_array_string_value("route", route_id, "points", point_ids)
        int i = 0
        while i < points_count
            string point_id = point_ids[i]
            string point_position = extern config_get_scalar_string_value("route_point", point_id, "position")
            bool success1 = extern track_state_set_value("point", point_id, point_position)

            i = i +1
        end

        # set entry signal to green
        string src_signal_id = extern config_get_scalar_string_value("route", route_id, "source")
        bool success2 = extern track_state_set_value("signal", src_signal_id, "green")
    end
end