/*
 * generated by Xtext 2.20.0
 */
package de.uniba.swt.dsl.tests

import com.google.inject.Inject
import de.uniba.swt.dsl.bahn.ModuleObject
import org.eclipse.xtext.testing.InjectWith
import org.eclipse.xtext.testing.extensions.InjectionExtension
import org.eclipse.xtext.testing.util.ParseHelper
import org.junit.jupiter.api.Assertions
import org.junit.jupiter.api.Test
import org.junit.jupiter.api.^extension.ExtendWith

@ExtendWith(InjectionExtension)
@InjectWith(BahnInjectorProvider)
class IntergrationParsingTest {
	@Inject
	ParseHelper<ModuleObject> parseHelper
	
	@Test
	def void testExprIntegration() {
		val result = parseHelper.parse('''
			module expr
				def inter()
					# grant route
					grant route1 to cargo_green

					# set aspect
					set signal sig1 to red
					set point point1 to normal

					# get aspect
					var pAspect = get point point1
					var sAspect = get signal sig1

					# check aspect
					bool isRed = get signal sig1 is red
					bool isNotNormal = get point point1 is not normal

					# wait
					wait for 3 seconds

					# segment occupied
					bool so1 = seg1 is occupied
					bool so2 = seg1 is not occupied

					# segment occupied by train
					bool s1 = seg1 is occupied by train
					bool s2 = seg1 is not occupied by train

					# route available
					bool r1 = route1 is available
					bool r2 = route1 is not available

					# get route
					var route1 = get route from sig1 to sig2
				end
			end
		''')
		Assertions.assertNotNull(result)
		val errors = result.eResource.errors
		Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
	}
}
