/*
 * generated by Xtext 2.20.0
 */
package de.uniba.swt.dsl.validation;


import de.uniba.swt.dsl.bahn.Expression;
import de.uniba.swt.dsl.bahn.FuncDecl;
import de.uniba.swt.dsl.bahn.Statement;
import de.uniba.swt.dsl.validation.util.ValidationException;
import de.uniba.swt.dsl.validation.validators.DeclValidator;
import de.uniba.swt.dsl.validation.validators.ExpressionValidator;
import de.uniba.swt.dsl.validation.validators.StatementValidator;
import org.eclipse.xtext.validation.Check;

/**
 * This class contains custom validation rules. 
 *
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#validation
 */
public class BahnValidator extends AbstractBahnValidator {

    @Check
    public void typeCheckingExpression(Expression expression) {
        try {
            ExpressionValidator.validate(expression);
        } catch (ValidationException e) {
            error(e.getMessage(), e.getFeature());
        }
    }

    @Check
    public void typeCheckingStatement(Statement statement) {
        try {
            StatementValidator.validate(statement);
        } catch (ValidationException e) {
            error(e.getMessage(), e.getFeature());
        }
    }

    @Check
    public void typeCheckingFuncDecl(FuncDecl funcDecl) {
        try {
            DeclValidator.validateFuncDecl(funcDecl);
        } catch (ValidationException e) {
            error(e.getMessage(), e.getFeature());
        }
    }

//    @Check
//    public void mainFuncRequired(BahnExpr bahnExpr) {
//        boolean hasMain = bahnExpr.getDecls() != null
//                && bahnExpr.getDecls().stream().anyMatch(d -> Objects.equals(d.getName().toLowerCase(), "main"));
//        if (!hasMain) {
//            error("Main function is required", BahnexprPackage.Literals.BAHN_EXPR__DECLS);
//        }
//    }
}
