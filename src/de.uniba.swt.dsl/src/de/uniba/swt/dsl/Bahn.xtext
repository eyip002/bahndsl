grammar de.uniba.swt.dsl.Bahn with org.eclipse.xtext.common.Terminals

import "http://www.eclipse.org/emf/2002/Ecore" as ecore

generate bahn "http://www.uniba.de/swt/dsl/Bahn"

BahnModel:
	(schema=Schema)? (configKeys=ConfigKeys)? (signalTypes=SignalTypes)? (components+=Component)*
;

Component:
	RootModule | FuncDecl
;

RootModule:
	'module' name=ID
		(properties+=ModuleProperty)*
	'end';

Schema:
	{Schema}
	'schema'
		(elements+=SchemaElement)*
	'end'
;
SchemaElement:
	name=ID
        (properties+=ElementProp)*
    'end'
;

ElementProp:
	name=ID type=DataType array?='[]'?
;

ConfigKeys:
	{ConfigKeys} 'config' (keys += ConfigKey)* 'end'
;

ConfigKey:
	name=ID
;

SignalTypes:
	'signaltypes' (types+=SignalType)+ 'end'
;

SignalType:
	{SignalType}
	name=ID 'aspects' (items+=AspectElement)+ 'end' 'initial' initial=[AspectElement] 
;
	
ModuleProperty:
	BoardsProperty 
	| SegmentsProperty 
	| SignalsProperty 
	| PointsProperty 
	| PeripheralsProperty
	| BlocksProperty
	| CrossingsProperty
	| TrainsProperty 
	| LayoutProperty 
	| PlatformsProperty
	;

BoardsProperty :
	{BoardsProperty} 'boards'
		(items+=BoardElement)*
	'end';
SegmentsProperty :
	'segments' board=[BoardElement]
		(items+=SegmentElement)*
	'end';
SignalsProperty :
	'signals' board=[BoardElement]
		(items+=SignalElement)*
	'end';
PointsProperty :
	'points' board=[BoardElement]
		(items+=PointElement)*
	'end';
PeripheralsProperty:
	'peripherals' board=[BoardElement]
		(items+=SignalElement)*
	'end';
BlocksProperty :
	{BlocksProperty} 'blocks'
		(items+=BlockElement)*
	'end';
CrossingsProperty:
	{CrossingsProperty}
    'crossings'
		(items+=CrossingElement)*
	'end';
PlatformsProperty :
	{PlatformsProperty} 'platforms'
		(items+=BlockElement)*
	'end';
TrainsProperty :
	{TrainsProperty} 'trains'
		(items+=TrainElement)*
	'end';
LayoutProperty :
	{LayoutProperty} 'layout'
		(items+=LayoutElement)*
	'end';

enum TrackState:
	CLEAR = 'clear' | CAUTION = 'caution' | STOP = 'stop' | NORMAL = 'normal' | REVERSE = 'reverse'
;
		
enum TrainType:
	CARGO='cargo' | PASSENGER='passenger'
;

AspectElement :
	name=ID value=HEX
;

BoardElement :
	name=ID uniqueId=HEX ('features' (features+=BoardFeatureElement)+ 'end')?
;

BoardFeatureElement:
	number=HEX ':' value=HEX
;

SegmentElement :
	name=ID address=HEX keyLength=[ConfigKey] length=Length
;

SignalElement :
	type=[SignalType] name=ID number=HEX 
;

PointElement:
	name=ID number=HEX 
		key=[ConfigKey] mainSeg=[SegmentElement]
		'normal' normalValue=HEX
		'reverse' reverseValue=HEX 
		'initial' initial=PointAspectType
;

enum PointAspectType:
	NORMAL = 'normal' | REVERSE = 'reverse'
;

BlockElement:
	name=ID 
		('overlap' overlaps+=[SegmentElement])?
		'main' mainSeg=[SegmentElement] 
		('overlap' overlaps+=[SegmentElement])?
		('trains' (trainTypes+=TrainType)+ 'end')?
		(limitKey=[ConfigKey] limitSpeed=Speed)?
;

CrossingElement:
    name=ID key=[ConfigKey] mainSeg=[SegmentElement]
;

TrainElement :
	name=ID address=HEX 
		'steps' steps=INT
		('calibration' (calibrations+=INT)+ 'end')? &
		('peripherals' (peripherals+=TrainPeripheral)+ 'end')? &
		(props+=ConfigProp)*
;

ConfigProp:
	key=[ConfigKey] value=ConfigValue
;

ConfigValue:
	Length | Weight | TrainTypeValue
;

TrainTypeValue:
	type=TrainType
;

TrainPeripheral:
	name=ID 'bit' bit=INT 'initial' initial=INT
;

TrackSection:
	BlockElement | PointElement | CrossingElement
;

LayoutElement :
	blocks+=LayoutReference (connectors+=('--'|'->') blocks+=LayoutReference)*
;

LayoutReference:
	elem=[TrackSection] notSignal?='.' prop=ConnectorProp
	|
	elem=[SignalElement]
;

enum ConnectorProp:
    STEM='stem' | STRAIGHT='straight' | SIDE='side' | DOWN='down' | UP='up' | DOWN1='down1' | DOWN2='down2' | UP1='up1' | UP2='up2'
;

Length:
	value=NUMBER unit=LengthUnit
;

Speed:
    value=NUMBER unit=SpeedUnit
;

enum LengthUnit:
	CENTIMETRE = 'cm' | METRE = 'm' | KILOMETRE = 'km'
;

enum SpeedUnit:
    METERS_SECOND = 'm/s' | KILOMETERS_PER_HOUR = 'km/h'
;

Weight:
	value=NUMBER unit=WeightUnit
;

enum WeightUnit:
	GRAM = 'g' | KILOGRAM = 'kg'| TON = 't'
;


FuncDecl:
	'def' name=ID ('()' | '(' paramDecls+=ParamDecl (',' paramDecls+=ParamDecl)* ')') (return?=':' returnType=DataType returnArray?='[]'?)?
		stmtList=StatementList
	'end'
;

StatementList:
	{StatementList} (stmts+=Statement)*
;

Statement:
	SelectionStmt | IterationStmt | ForeachStmt | VarDeclStmt | AssignmentStmt | FunctionCallStmt | ReturnStmt | BreakStmt
;

SelectionStmt returns Statement:
	{SelectionStmt} 'if' expr=Expression
	thenStmts=StatementList
	(=>'else'
		elseStmts=StatementList
	)?
	'end'
;

IterationStmt returns Statement:
	{IterationStmt} 'while' expr=Expression
		stmts=StatementList
	'end'
;

ForeachStmt returns Statement:
	{ForeachStmt} 'for' decl=VarDecl 'in' arrayExpr=ValuedReferenceExpr
		stmts=StatementList
	'end'
;

VarDeclStmt returns Statement:
	{VarDeclStmt} decl=VarDecl (assignment=VariableAssignment)?
;

VarDecl:
	{VarDecl} type=DataType name=ID (array?='[]')?
;

ParamDecl:
	{ParamDecl} type=DataType name=ID array?='[]'?
;

RefVarDecl:
	VarDecl | ParamDecl
;

AssignmentStmt returns Statement:
	{AssignmentStmt} referenceExpr=ValuedReferenceExpr assignment=VariableAssignment
;

FunctionCallStmt returns Statement:
	{FunctionCallStmt} expr=FunctionCallExpr
;

ReturnStmt returns Statement:
	{ReturnStmt}'return' expr=Expression
;

BreakStmt returns Statement:
	{BreakStmt} 'break'
;

VariableAssignment:
	'=' ('{' arrExprs+=LiteralExpr (',' arrExprs+=LiteralExpr)* '}' | expr=Expression)
;

Expression:
	LogicalOrExpr
;

LogicalOrExpr returns OpExpression:
	LogicalAndExpr ({OpExpression.leftExpr=current} op=OrOp rightExpr=LogicalAndExpr)*
;

LogicalAndExpr returns OpExpression:
	EqualityExpr ({OpExpression.leftExpr=current} op=AndOp rightExpr=EqualityExpr)*
;

EqualityExpr returns OpExpression:
	RelationalExpr ({OpExpression.leftExpr=current} op=EqualityOp rightExpr=RelationalExpr)*
;


RelationalExpr returns OpExpression:
	AdditiveExpr ({OpExpression.leftExpr=current} op=RelationalOp rightExpr=AdditiveExpr)*
;

AdditiveExpr returns OpExpression:
	MultiplicativeExpr ({OpExpression.leftExpr=current} op=PlusMinusOp rightExpr=MultiplicativeExpr)*
;

MultiplicativeExpr returns OpExpression:
	PrimaryExpr ({OpExpression.leftExpr=current} op=MulDivOp rightExpr=PrimaryExpr)*
;

PrimaryExpr:
    UnaryExpr
	| ParenthesizedExpr
	| LiteralExpr 
	| ValuedReferenceExpr
	| FunctionCallExpr
;

UnaryExpr:
	{UnaryExpr} '!' expr=PrimaryExpr
;

ParenthesizedExpr:
	'(' expr=Expression ')'
;

LiteralExpr:
	BooleanLiteral
	| NumberLiteral
	| StringLiteral
;

ValuedReferenceExpr:
	decl=[RefVarDecl] (('['indexExpr=Expression']') | ('.' length?='len'))?
;

FunctionCallExpr:
	RegularFunctionCallExpr
	| ExternalFunctionCallExpr
	| BehaviourExpr
;

RegularFunctionCallExpr returns FunctionCallExpr:
	{RegularFunctionCallExpr}
	decl=[FuncDecl] ('()' | '(' params+=Expression (',' params+=Expression)* ')')
;

ExternalFunctionCallExpr returns FunctionCallExpr:
	{ExternalFunctionCallExpr}
	'extern' name=ID ('()' | '(' params+=Expression (',' params+=Expression)* ')')
;

BehaviourExpr returns FunctionCallExpr:
	BehaviourGetExpr | BehaviourSetExpr | GetRoutesFuncExpr | GrantRouteFuncExpr | EvaluateFuncExpr
;

BehaviourGetExpr returns BehaviourExpr:
	{BehaviourGetExpr}
	'get' getExpr=(GetTrackStateFuncExpr | GetTrainSpeedFuncExpr | GetRoutesFuncExpr | GetConfigFuncExpr)
;

GetTrackStateFuncExpr:
	{GetTrackStateFuncExpr} 
	'state' trackExpr=PrimaryExpr 
;

GetTrainSpeedFuncExpr:
    {GetTrainSpeedFuncExpr}
    'speed' trainExpr=PrimaryExpr
;

GetRoutesFuncExpr returns BehaviourExpr:
	{GetRoutesFuncExpr}
	'routes' 'from' srcSignalExpr=PrimaryExpr 'to' destSignalExpr=PrimaryExpr
;

GetConfigFuncExpr:
	{GetConfigFuncExpr}
	'config' type=[SchemaElement] '.' prop=[ElementProp] configExpr=PrimaryExpr
;

BehaviourSetExpr returns BehaviourExpr:
	{BehaviourSetExpr}
	'set' setExpr=(SetTrackStateFuncExpr | SetTrainSpeedFuncExpr | SetConfigFuncExpr)
;

SetTrackStateFuncExpr:
	{SetTrackStateFuncExpr}
	'state' trackExpr=PrimaryExpr 'to' aspectExpr=TrackState
;

SetTrainSpeedFuncExpr:
	{SetTrainSpeedFuncExpr}
	'train' trainExpr=PrimaryExpr 'speed' 'to' speedExpr=Expression
;

SetConfigFuncExpr:
	{SetConfigFuncExpr}
	'config' type=[SchemaElement] '.' prop=[ElementProp] configExpr=PrimaryExpr 'to' valueExpr=PrimaryExpr
;

GrantRouteFuncExpr returns BehaviourExpr:
	{GrantRouteFuncExpr} 
	'grant' routeExpr=PrimaryExpr 'to' trainExpr=PrimaryExpr
;

EvaluateFuncExpr returns BehaviourExpr:
	{EvaluateFuncExpr}
	'is' objectExpr=PrimaryExpr not?='not'? (routeAvailable?='available'|segmentOccupied?='occupied')
;

BooleanLiteral returns LiteralExpr:
	{BooleanLiteral} boolValue=BOOLEAN
;

NumberLiteral:
	{NumberLiteral} value=NUMBER
;

StringLiteral:
	{StringLiteral} value=STRING
;

enum DataType:
	INT_TYPE='int' | FLOAT_TYPE = 'float' | BOOLEAN_TYPE = 'bool' | STRING_TYPE = 'string'
;

terminal BOOLEAN returns ecore::EBoolean:
	'true' | 'false'
;

enum PlusMinusOp returns OperatorType:
	PLUS = '+' | MINUS = '-'
;

enum MulDivOp returns OperatorType:
	MULTIPLY = '*' | DIVISION = '/'
;

enum OrOp returns OperatorType:
	OR = '||'
;

enum AndOp returns OperatorType:
	AND = '&&'
;

enum EqualityOp returns OperatorType:
	EQUAL='==' | NOT_EQUAL='!='
;

enum RelationalOp returns OperatorType:
	GREATER='>' | LESS='<' | GREATER_OR_EQUAL='>=' | LES_OR_EQUAL='<='
;

NUMBER returns ecore::EDouble:
	'-'? INT ('.' INT)?
;

terminal HEX returns ecore::EString:
	('0x'|'0X') ('0'..'9'|'a'..'f'|'A'..'F')+;

@Override	
terminal ID: ('a'..'z'|'A'..'Z') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

@Override
terminal SL_COMMENT : '#' !('\n'|'\r')* ('\r'? '\n')?;

@Override
terminal STRING returns ecore::EString:
	'"' ( '\\' ('b'|'t'|'n'|'f'|'r'|'"'|"'"|'\\') | !('\\'|'"') )* '"';