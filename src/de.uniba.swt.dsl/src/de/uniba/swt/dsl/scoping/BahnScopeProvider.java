/*
 * generated by Xtext 2.20.0
 */
package de.uniba.swt.dsl.scoping;


import de.uniba.swt.dsl.bahn.*;

import org.apache.log4j.LogManager;
import org.apache.log4j.Logger;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EReference;
import org.eclipse.xtext.EcoreUtil2;
import org.eclipse.xtext.scoping.IScope;
import org.eclipse.xtext.scoping.Scopes;

import java.util.List;

/**
 * This class contains custom scoping description.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#scoping
 * on how and when to use it.
 */
public class BahnScopeProvider extends AbstractBahnScopeProvider {
    private static final Logger logger = LogManager.getLogger(BahnScopeProvider.class);

    @Override
    public IScope getScope(EObject context, EReference reference) {

        if (context instanceof GetConfigFuncExpr && reference == BahnPackage.Literals.GET_CONFIG_FUNC_EXPR__PROP) {
            GetConfigFuncExpr expr = (GetConfigFuncExpr) context;
            return Scopes.scopeFor(expr.getType().getProperties());
        }

        if (context instanceof SetConfigFuncExpr && reference == BahnPackage.Literals.SET_CONFIG_FUNC_EXPR__PROP) {
            SetConfigFuncExpr expr = (SetConfigFuncExpr) context;
            return Scopes.scopeFor(expr.getType().getProperties());
        }

        return super.getScope(context, reference);
    }

    private <T extends EObject> IScope getScopes(EObject context, Class<T> type) {
        EObject rootElement = EcoreUtil2.getRootContainer(context);
        List<T> candidates = EcoreUtil2.getAllContentsOfType(rootElement, type);
        return Scopes.scopeFor(candidates);
    }
}
