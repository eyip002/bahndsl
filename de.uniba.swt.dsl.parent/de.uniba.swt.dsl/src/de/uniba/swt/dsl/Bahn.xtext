grammar de.uniba.swt.dsl.Bahn with de.uniba.swt.expr.BahnExpr

import "http://www.eclipse.org/emf/2002/Ecore" as ecore

generate bahn "http://www.uniba.de/swt/dsl/Bahn"
import "http://www.uniba.de/swt/expr/BahnExpr" as bahnexpr


ModuleObject:
	'module' name=ID
		(properties+=ModuleProperty)*
	'end';
	
ModuleProperty:
	AspectsProperty 
	| BoardsProperty 
	| SegmentsProperty 
	| SignalsProperty 
	| PointsProperty 
	| BlocksProperty 
	| TrainsProperty 
	| LayoutProperty 
	| PlatformProperty
	| RouteProperty
	| FuncDeclsProperty
	;

AspectsProperty :
	{AspectsProperty} 'aspects'
		(items+=AspectElement)*
	'end';
BoardsProperty :
	{BoardsProperty} 'boards'
		(items+=BoardElement)*
	'end';
SegmentsProperty :
	'segments' boardId=ID
		(items+=SegmentElement)*
	'end';
SignalsProperty :
	'signals' boardId=ID
		(items+=SignalElement)*
	'end';
PointsProperty :
	'points' boardId=ID
		(items+=PointElement)*
	'end';
BlocksProperty :
	{BlocksProperty} 'blocks'
		(items+=BlockElement)*
	'end';
TrainsProperty :
	{TrainsProperty} 'trains'
		(items+=TrainElement)*
	'end';
LayoutProperty :
	{LayoutProperty} 'layout'
		(items+=LayoutElement)*
	'end';
PlatformProperty :
	{PlatformProperty} 'platform'
		(items+=PlatformElement)*
	'end';
RouteProperty:
	{RouteProperty} 'routes'
		(items+=RouteElement)*
	'end';
	
FuncDeclsProperty:
	{FuncDeclsProperty} decls+=FuncDecl
;

@Override 
FunctionCallExpr returns bahnexpr::FunctionCallExpr:
	super | GetFuncExpr | WaitFuncExpr | GrantRouteFuncExpr | SetAspectFuncExpr
;

GetFuncExpr returns BExpression:
	{GetFuncExpr} 'get'
	(
		aspectObjectType=AspectObjectType aspectObjectId=PrimaryExpr
	|
		getRoute?='route from' srcSignalExpr=PrimaryExpr 'to' destSignalExpr=PrimaryExpr
	)
;

WaitFuncExpr returns BExpression:
	{WaitFuncExpr} 'wait' 'for' value=INT timeSpan=TimeSpanType
;

GrantRouteFuncExpr returns BExpression:
	{GrantRouteFuncExpr} 'grant' routeExpr=PrimaryExpr 'to' trainExpr=PrimaryExpr
;

SetAspectFuncExpr returns BExpression:
	{SetAspectFuncExpr} 
	'set' aspectObjectType=AspectObjectType objectExpr=PrimaryExpr 'to' aspectExpr=PrimaryExpr
;

enum TimeSpanType:
	SECONDS = 'seconds' | MINUTES = 'minutes' | HOURS = 'hours'
;

enum AspectObjectType:
	POINT = 'point' | SIGNAL = 'signal'
;

@Override
EqualityExpr returns Expression:
	{EqualityExpr}leftExpr=RelationalExpr suffix=BEqualityExprSuffix?
;

BEqualityExprSuffix:
	op=BEqualityOperator
	(
		occupiedBy?='occupied by'? rightExpr=RelationalExpr
	|
		routeAvailable?='available'
	|
		occupied?='occupied'
	)
;

BEqualityOperator:
	'is' isNot?='not'?
;
	
PlatformElement: 
	('length' length=INT) 
	| ('length_unit' (lengthUnit=('cm'|'m'))) 
	| ('weight_unit' (weightUnit=('gr'|'kg'))) 
	| ('direction' (direction=('clockwise'|'anti-clockwise')))
	| {PlatformElement} ('train_types' (trainTypes+=TrainType)*)
;

RouteElement:
	id=ID 
	'source' source=ID 
	'destination' destination=ID 
	'direction' direction=DIRECTION 
	'path' (segments+=ID)* 'end'
	'points' points+=RoutePoint 'end'
	'signals' signals+=ID 'end'
	'conflicts' conflicts+=ID 'end'
;

RoutePoint:
	pointId=ID aspect=ID
;
		
enum TrainType:
	CARGO='cargo' | PASSENGER='passenger'
;

AspectElement :
	name=ID ':' value=HEX
;

BoardElement :
	id=ID uniqueId=HEX ('features' features+=BoardFeatureElement (',' features+=BoardFeatureElement)*)?
;

BoardFeatureElement:
	number=HEX ':' value=HEX
;

SegmentElement :
	id=ID address=HEX
;

SignalElement :
	id=ID number=HEX 'aspects' aspects=SignalAspectsElement 'end' 'initial' initial=[AspectElement] 
;

SignalAspectsElement:
	ReferenceSignalAspectsElement | OverrideSignalAspectsElement
;

ReferenceSignalAspectsElement:
	(aspects+=[AspectElement])+
;

OverrideSignalAspectsElement:
	(aspects+=AspectElement)+
;

PointElement :
	id=ID number=HEX aspects=PointAspectsElement 'initial' initial=[AspectElement]
;

PointAspectsElement:
	ReferencePointAspectsElement | OverridePointAspectsElement	
;

ReferencePointAspectsElement:
	{ReferencePointAspectsElement} (referenceAspects+=ReferencePointAspectElement)*
;

OverridePointAspectsElement:
	{OverridePointAspectsElement} 'aspects' (overrideAspects+=OverridePointAspectElement)+	
;

OverridePointAspectElement:
	id=ID value=HEX ':' segments=PointSegment
;

ReferencePointAspectElement :
	id=ID ':' segments=PointSegment
;

PointSegment:
	segStart=ID direction=DIRECTION segEnd=ID
;

BlockElement :
	BidirectionalBlockElement | ClockwiseBlockElement | AntiClockwiseBlockElement
;

BidirectionalBlockElement:
	id=ID 'buffer' ':' startSeg=ID ',' startSignal=ID directionStart=DIRECTION  'main' ':' mainSeg=ID directionEnd=DIRECTION  'buffer' ':' endSeg=ID ',' endSignal=ID
;

ClockwiseBlockElement:
	id=ID 'buffer' ':' startSeg=ID ',' startSignal=ID direction=DIRECTION  'main' ':' mainSeg=ID
;

AntiClockwiseBlockElement:
	id=ID 'main' ':' mainSeg=ID direction=DIRECTION 'buffer' ':' endSeg=ID ',' endSignal=ID
;

TrainElement :
	id=ID address=HEX 'steps' steps=INT 'calibration' (calibrations+=INT (',' calibrations+=INT)*) 'weight' weight=INT
		'peripherals' (peripherals+=PeripheralElement)* 
;

PeripheralElement:
	id=ID 'bit' bit=INT 'initial' initial=INT
;

LayoutElement :
	ids+=LayoutId ('--' ids+=LayoutId)*
;

LayoutId:
	objectId=ID ('.' prop=ID)?
;

enum DIRECTION:
	Clockwise='->' | AntiClockwise='<-' | Bidirectional='<->'
;

@Override
terminal HEX returns ecore::ELong:
	('0x'|'0X') ('0'..'9'|'a'..'f'|'A'..'F')+;