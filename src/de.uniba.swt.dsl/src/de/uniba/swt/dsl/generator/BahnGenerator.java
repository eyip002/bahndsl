/*
 * generated by Xtext 2.20.0
 */
package de.uniba.swt.dsl.generator;

import de.uniba.swt.dsl.common.generator.sccharts.SCChartsGenerator;
import de.uniba.swt.dsl.common.generator.yaml.YamlConfigGenerator;
import de.uniba.swt.dsl.common.util.BahnUtil;
import de.uniba.swt.dsl.normalization.BahnNormalizationProvider;
import org.apache.log4j.Logger;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;

import com.google.inject.Inject;

import de.uniba.swt.dsl.common.layout.LayoutGenerator;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
public class BahnGenerator extends AbstractGenerator {

	private static Logger logger = Logger.getLogger(BahnGenerator.class);

	@Inject
	BahnNormalizationProvider normalizationProvider;

	@Inject
	YamlConfigGenerator yamlConfigGenerator;

	@Inject
	SCChartsGenerator scChartsGenerator;
	
	@Inject
	LayoutGenerator layoutGenerator;

	@Override
	public void beforeGenerate(Resource input, IFileSystemAccess2 fsa, IGeneratorContext context) {
		normalizationProvider.normalize(BahnUtil.getDecls(input.getResourceSet()));
	}

	@Override
	public void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		var bahnModel = BahnUtil.getBahnModel(resource);
		if (bahnModel == null)
			return;

		// layout generator must run first to generate network layout
		layoutGenerator.generate(fsa, bahnModel);

		// use network layout for block generation (direction, signals)
		yamlConfigGenerator.setNetworkLayout(layoutGenerator.getNetworkLayout());
		yamlConfigGenerator.generate(fsa, bahnModel);

		// sccharts
		scChartsGenerator.generate(fsa, bahnModel);
	}
}
