/*
 * generated by Xtext 2.20.0
 */
package de.uniba.swt.expr.generator;

import java.util.Objects;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;

import com.google.inject.Inject;

import de.uniba.swt.expr.bahnexpr.BahnExpr;
import de.uniba.swt.expr.bahnexpr.FuncDecl;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
public class BahnExprGenerator extends AbstractGenerator {

	@Inject
	SCChartsGenerator generator;

	@Override
	public void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		fsa.generateFile("ast.txt", AstGenerator.dumpAst(resource.getContents().get(0), ""));

		EObject e = resource.getContents().get(0);
		if (e instanceof BahnExpr) {
			// find entry func
			FuncDecl mainDecl = ((BahnExpr) e).getDecls().stream().filter(f -> Objects.equals(f.getName().toLowerCase(), "main")).findFirst().orElse(null);
			fsa.generateFile("interlocking.sctx", generator.generateModel(((BahnExpr) e).getDecls()));
		}
	}
}
