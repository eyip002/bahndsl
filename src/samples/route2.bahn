module route2
    def interlocking(string src_signal_id, string dst_signal_id): string
        string route_ids[100]
        int count_routes = get routes from src_signal_id to dst_signal_id binding route_ids
        string id = get_shortest_route(count_routes, route_ids)
        bool is_grantable = route_is_grantable(id)

        if !is_grantable
            id = ""
        end

        return id
    end

    def get_shortest_route(int count_routes, string route_ids[]): string
        float min_len = 2147483647
        int i = 0
        int result = 0
        while i < count_routes
            string route_id = route_ids[i]
            # float len = get route config route_id length -> float len = extern config_get_scalar_float_value("route", route_id, "length")
            # string src = get route config route_id "source" -> string src = extern config_get_scalar_string_value("route", route_id, "source")
            float len = extern config_get_scalar_float_value("route", route_id, "length")
            if len < min_len
                min_len = len
                result = i
            end

            i = i + 1
        end

        return route_ids[result]
    end

    def route_is_grantable(string route_id): bool
        string train_id = extern config_get_scalar_string_value("route", route_id, "train")

        string conflict_routes[100]
        int count_conflict_routes = extern config_get_array_string_value("route", route_id, "conflicts", conflict_routes)

        # (conflict_routes, count_conflict_routes) = get config array route route_id conflicts

        int i = 0
        bool result = true
        while i < count_conflict_routes
            string conflict_route_id = conflict_routes[i]
            string conflict_train_id = extern config_get_scalar_string_value("route", conflict_route_id, "train")
            if conflict_train_id != ""
                result = false
            end

            i = i + 1
        end

        return result
    end
end