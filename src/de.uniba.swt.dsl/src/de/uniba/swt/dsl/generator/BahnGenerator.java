/*
 * generated by Xtext 2.20.0
 */
package de.uniba.swt.dsl.generator;

import de.uniba.swt.dsl.bahn.BahnModel;
import de.uniba.swt.dsl.common.generator.GeneratorProvider;
import de.uniba.swt.dsl.common.generator.sccharts.SCChartsGenerator;
import de.uniba.swt.dsl.common.generator.yaml.YamlConfigGenerator;
import de.uniba.swt.dsl.normalization.BahnNormalizationProvider;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;

import com.google.inject.Inject;

import de.uniba.swt.dsl.bahn.RootModule;
import de.uniba.swt.dsl.common.generator.yaml.BidibYamlConfigGenerator;
import de.uniba.swt.dsl.common.layout.LayoutGenerator;
import de.uniba.swt.dsl.common.models.NetworkModel;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
public class BahnGenerator extends AbstractGenerator {
	@Inject
	BahnNormalizationProvider normalizationProvider;

	@Inject
	YamlConfigGenerator yamlConfigGenerator;

	@Inject
	SCChartsGenerator scChartsGenerator;
	
	@Inject
	LayoutGenerator layoutGenerator;

	@Override
	public void beforeGenerate(Resource input, IFileSystemAccess2 fsa, IGeneratorContext context) {
		RootModule rootModule = getRootModule(input);
		if (rootModule != null) {
			normalizationProvider.normalize(rootModule);
		}
	}

	@Override
	public void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {

		RootModule rootModule = getRootModule(resource);
		if (rootModule != null) {
			// layout generator must run first to generate network layout
			layoutGenerator.run(fsa, rootModule);
			scChartsGenerator.run(fsa, rootModule);

			// use network layout for block generation (direction, signals)
			yamlConfigGenerator.setNetworkLayout(layoutGenerator.getNetworkLayout());
			yamlConfigGenerator.run(fsa, rootModule);
		}
	}

	private RootModule getRootModule(Resource resource) {
		EObject e = resource.getContents().get(0);
		if (e instanceof BahnModel) {
			return ((BahnModel) e).getModule();
		}

		return null;
	}
}
