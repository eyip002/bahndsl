/*
 * generated by Xtext 2.20.0
 */
package de.uniba.swt.expr.tests

import com.google.inject.Inject
import org.eclipse.xtext.testing.InjectWith
import org.eclipse.xtext.testing.extensions.InjectionExtension
import org.eclipse.xtext.testing.util.ParseHelper
import org.junit.jupiter.api.Assertions
import org.junit.jupiter.api.Test
import org.junit.jupiter.api.^extension.ExtendWith
import de.uniba.swt.expr.bahnexpr.BahnExpr
import org.eclipse.xtext.testing.validation.ValidationTestHelper
import org.eclipse.emf.ecore.EClass
import de.uniba.swt.expr.bahnexpr.BahnexprFactory
import de.uniba.swt.expr.services.BahnExprGrammarAccess
import de.uniba.swt.expr.bahnexpr.BahnexprPackage

@ExtendWith(InjectionExtension)
@InjectWith(BahnExprInjectorProvider)
class FunctionCallValidationTest {
	@Inject extension ParseHelper<BahnExpr>
	@Inject extension ValidationTestHelper

	@Test
	def void testCallMainError() {
		'''
		    def main()
		        plus()
		    end
		    def plus()
		    main()
		    end
		'''.parse.assertError(BahnexprPackage.Literals.FUNCTION_CALL_EXPR, "org.eclipse.xtext.diagnostics.Diagnostic.Linking", "Couldn't resolve reference to FuncDecl 'main'")
	}

	@Test
    def void testCallUndefinedFunc() {
        '''
            def main()
                func1()
            end
        '''.parse.assertError(BahnexprPackage.Literals.FUNCTION_CALL_EXPR, "org.eclipse.xtext.diagnostics.Diagnostic.Linking", "Couldn't resolve reference to FuncDecl 'func1'")
    }

    @Test
    def void testCallValidFunc() {
        '''
            def main()
                plus(1, -2)
            end
            def plus(int a, int b)
                return a + b
            end
        '''.parse.assertNoErrors
    }
}
