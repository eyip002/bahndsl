module SWTbahn2

    # interlocking procedure - required
    def interlocking_procedure(source_signal, destination_signal, train)
        var route = find route from source_signal to destination_signal
        if route is nil
            return nil
        end
        
        var not_grantable = route_is_unavailable_or_conflicted(route)
        if not_grantable
            return nil
        end
        
        var is_clear = route_is_clear(route, train)
        if not is_clear
            return nil
        end
        
        # block route
        route.train = train

        # set points and signals
        set_route_points_signals(route)
        
        return route
    end

    def route_is_unavailable_or_conflicted(route)
        # Check if the route has been granted (unavailable)
        if route.train not nil
            return true

        # Check conflicts
        for item in route.conflicts
            if item.train not nil
                return true
            end
        end

        return false
    end

    def route_is_clear(route, train)
        # Signal at the route source has to be red (stop aspect)
        if signal route.source is red
            return false
        end

        # Signals of tracks that intersect the route have to be red (stop aspect)
        for signal in route.signals
            if signal signal is not red
                return false
            end
        end

        # All track segments on the route have to be clear
        var index = 0
        for segment in route.path
            if segment is occupied
                if index == 0 and segment is not occupied by train
                    return false
                end
            else
                return false
            end
            index = index + 1
        end
        return true
    end

    def set_route_points_signals(route)
        # Set points
        for point in route.points
            if not (switch point point.point point.position)
                return false
            end
        end

        # Set entry signal to green (proceed aspect)
        if set signal route.source green
            # Set signal - invalid parameters
            return false
        end

        return true
    end
end