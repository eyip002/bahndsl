/*
 * generated by Xtext 2.20.0
 */
package de.uniba.swt.expr.tests

import com.google.inject.Inject
import org.eclipse.xtext.testing.InjectWith
import org.eclipse.xtext.testing.extensions.InjectionExtension
import org.eclipse.xtext.testing.util.ParseHelper
import org.junit.jupiter.api.Assertions
import org.junit.jupiter.api.Test
import org.junit.jupiter.api.^extension.ExtendWith
import de.uniba.swt.expr.bahnExpr.StatementList

@ExtendWith(InjectionExtension)
@InjectWith(BahnExprInjectorProvider)
class BahnExprParsingTest {
	@Inject
	ParseHelper<StatementList> parseHelper

	@Test
	def void testLogicalOrExpr() {
		val result = parseHelper.parse('''
			bool result = true || false
		''')
		Assertions.assertNotNull(result)
		val errors = result.eResource.errors
		Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
	}
	
	@Test
	def void testLogicalAndExpr() {
		val result = parseHelper.parse('''
			bool result = true && false
			bool result = true && false || true
		''')
		Assertions.assertNotNull(result)
		val errors = result.eResource.errors
		Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
	}
	
	@Test
	def void testEqualityExpr() {
		val result = parseHelper.parse('''
			bool result1 = 3 == 4
			result1 = 3 != 4
			result2 = true == true
			result3 = true != false
			result4 = 1 == 2
		''')
		Assertions.assertNotNull(result)
		val errors = result.eResource.errors
		Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
	}

	@Test
	def void testEqualityExprReference() {
		val result = parseHelper.parse('''
			bool result1 = 3 == 4
			result1 = 3 != 4
			result2 = true == true
			result3 = true != false
			result4 = 1 == 2
		''')
		Assertions.assertNotNull(result)
		val errors = result.eResource.errors
		Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
	}
	
	@Test
	def void testRelationalExpr() {
		val result = parseHelper.parse('''
			bool success = 1 > 2
			success = 1 <= 2
			success = 1 > 2
			success = 1 >= 2
		''')
		Assertions.assertNotNull(result)
		val errors = result.eResource.errors
		Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
	}
	
	@Test
	def void testAdditiveExpr() {
		val result = parseHelper.parse('''
			int a = 3 + 4
			int b = 4 - 3
			int c = 3 - 4 +5
		''')
		Assertions.assertNotNull(result)
		val errors = result.eResource.errors
		Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
	}

	@Test
	def void testMultiplicativeExpr() {
		val result = parseHelper.parse('''
			int a = 3 * 4
			int b = 4 / 3
			float c = 3 * 4 / 5
		''')
		Assertions.assertNotNull(result)
		val errors = result.eResource.errors
		Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
	}

	@Test
	def void testUnaryExpr() {
		val result = parseHelper.parse('''
			int a = -3
			bool result = !true
		''')
		Assertions.assertNotNull(result)
		val errors = result.eResource.errors
		Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
	}

	@Test
	def void testParenthesizedExpr() {
		val result = parseHelper.parse('''
			int a = 5 * (3 + 4)
			bool result = true || (false && true)
		''')
		Assertions.assertNotNull(result)
		val errors = result.eResource.errors
		Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
	}

	@Test
	def void testBooleanLiteral() {
		val result = parseHelper.parse('''
			bool result = true
			result = false
		''')
		Assertions.assertNotNull(result)
		val errors = result.eResource.errors
		Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
	}

	@Test
	def void testNumberLiteral() {
		val result = parseHelper.parse('''
			int a = 3
			float b = 4.5
		''')
		Assertions.assertNotNull(result)
		val errors = result.eResource.errors
		Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
	}

	@Test
	def void testValuedReferenceExpr() {
		val result = parseHelper.parse('''
			float b = a * 5
			b = a + 5
			b = c || true
			b = d == true
			b = d > 3
		''')
		Assertions.assertNotNull(result)
		val errors = result.eResource.errors
		Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
	}

	@Test
	def void testArrayValuedReferenceExpr() {
		val result = parseHelper.parse('''
			float b = a[0] * 5
			b = a[1] + 5
			b = c[2] || true
			b = d[3] == true
			b = d[4] > 3
		''')
		Assertions.assertNotNull(result)
		val errors = result.eResource.errors
		Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
	}

	@Test
	def void testPropertyValuedReferenceExpr() {
		val result = parseHelper.parse('''
			float b = a.value * 5
			b = a.value + 5
			b = c.result || true
			b = d.result == true
			b = d.result > 3
		''')
		Assertions.assertNotNull(result)
		val errors = result.eResource.errors
		Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
	}
}
