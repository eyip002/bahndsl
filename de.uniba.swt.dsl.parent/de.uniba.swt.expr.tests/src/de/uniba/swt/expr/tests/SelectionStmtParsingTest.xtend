/*
 * generated by Xtext 2.20.0
 */
package de.uniba.swt.expr.tests

import com.google.inject.Inject
import org.eclipse.xtext.testing.InjectWith
import org.eclipse.xtext.testing.extensions.InjectionExtension
import org.eclipse.xtext.testing.util.ParseHelper
import org.junit.jupiter.api.Assertions
import org.junit.jupiter.api.Test
import org.junit.jupiter.api.^extension.ExtendWith
import de.uniba.swt.expr.bahnExpr.BahnExpr

@ExtendWith(InjectionExtension)
@InjectWith(BahnExprInjectorProvider)
class SelectionStmtParsingTest {
	@Inject
	ParseHelper<BahnExpr> parseHelper

	@Test
	def void testIfOnly() {
		val result = parseHelper.parse('''
			def test()
				if true
					o = 1
				end
			end
		''')
		Assertions.assertNotNull(result)
		val errors = result.eResource.errors
		Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
	}

	@Test
	def void testIfWithElse() {
		val result = parseHelper.parse('''
			def test()
				if true
					o = 1
				else
					o = 2
				end
			end
		''')
		Assertions.assertNotNull(result)
		val errors = result.eResource.errors
		Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
	}

	@Test
	def void testDanglingElse() {
		val result = parseHelper.parse('''
			def test()
				if true
					if false
						o = 2
					else 
						o = 3
					end
				end
			end
		''')
		Assertions.assertNotNull(result)
		val errors = result.eResource.errors
		Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
	}
}
