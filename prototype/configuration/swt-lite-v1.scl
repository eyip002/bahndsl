module SWTbahn
    
    # define all signal aspects
    aspects
        yellow 0x02
        green 0x01
        red 0x00
        on 0x00
        off 0x01
        normal 0x00
        reserve 0x01
    end

    # define all board, each board has ID and unique address
    boards
        master 0xDA000D680052EF
        lightcontrol 0x05000D6B0083EC
        onecontrol 0x05000D7500DBED
    end

    # define all segments on a board, each segment has ID and Address
    segments master
        seg1 0x00
        2 0x01
        3 0x02
        4 0x03
    end

    # define signals on a board, each board has ID, number and aspects
    signals lightcontrol
        1 0x00
            aspects yellow green red
            initial red
        2 0x01
            aspects yellow green red
            initial red
        7 0x06
            aspects 
                green 0x02
                red 0x09
            end
            initial red
        signalends 0x12
            aspects on off
            initial on
    end

    # define all points on a board, each point has ID, number and initial aspect, always has 2 aspects: normal and reserve
    points onecontrol
        point1 0x00 
        aspects normal reverse
        segment seg1
        initial normal
    end

    # define all blocks by combining defined segments and signals
    blocks
        block1 
            main segment seg2
            buffer segments 1 3 # buffer segments startSegmentId endSegmentId
            exit signal 1
            direction bidirectional
        block2 
            main segment seg4
            buffer segments 5
            exit signal 2
            direction clockwise
        block3 is (seg1) seg2 (seg3)
        block3 is (seg1) seg2 (seg3) start signal signal3 direction clockwise
        block3 is (seg1) seg2 (seg3) signals signal3 signal4 direction bidirectional
        block4 is (seg1) seg2
        block4 is seg3 (seg4)
        block1 buffer:seg1, signal1 <-> main:seg2, signal2 <-> buffer:seg3, signal3
    end

    layout
        block1 <-> block2 <-> point2
        block3 -> block4
        block1 -> point1.reverse -> block2
        block1 -> point1.normal -> block3
    end

    program
        set point1 to normal
        set point2 to reverse
        turn signal1 to green
        turn signal2 to red
        if signal1.green then
            set point1 to normal
        else
            
        end
    end
end

BahnDSL